name: Draft Release

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  USERNAME: sshcrack
  VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg
  FEED_URL: https://nuget.pkg.github.com/sshcrack/index.json
  VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/sshcrack/index.json,readwrite"

jobs:
  # Job to extract version and do initial validation
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Extract version from CMakeLists.txt
        id: version
        run: |
          VERSION=$(grep -Po 'project\([^ ]+ VERSION \K[0-9]+\.[0-9]+\.[0-9]+' CMakeLists.txt)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Check if tag or release exists
        id: check_tag
        run: |
          TAG="v${{ steps.version.outputs.VERSION }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists!" >&2
            exit 1
          fi
          if gh release view "$TAG" >/dev/null 2>&1; then
            echo "Release $TAG already exists!" >&2
            exit 1
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          cache-dependency-path: "react-native/pnpm-lock.yaml"

      - name: Install React Native dependencies
        working-directory: react-native
        run: pnpm install

      - name: Build React Native web version
        working-directory: react-native
        run: pnpm exec expo export --platform web

      - name: Upload web build artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: react-native/dist/

  # Build matrix for emulator and LED matrix
  build-matrix:
    runs-on: ubuntu-latest
    needs: prepare
    strategy:
      fail-fast: true
      matrix:
        build-type:
          - name: "emulator"
            preset: "emulator"
            artifact-name: "emulator-build"
            artifact-path: "emulator_build/led-matrix-${{ needs.prepare.outputs.version }}-Linux.tar.gz"
            requires-toolchain: false
          - name: "led-matrix"
            preset: "cross-compile"
            artifact-name: "led-matrix-build"
            artifact-path: |
              build/led-matrix-${{ needs.prepare.outputs.version }}-Linux.tar.gz
              build/led-matrix-${{ needs.prepare.outputs.version }}-Linux.deb
            requires-toolchain: true
    env:
      BUILD_TYPE: RelWithDebInfo
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: python3-jinja2 pkg-config autoconf automake libtool python3 linux-libc-dev curl libltdl-dev libx11-dev libxft-dev libxext-dev libwayland-dev libxkbcommon-dev libegl1-mesa-dev libibus-1.0-dev mono-complete
          version: 1.0

      - name: Update certificates
        run: |
            sudo apt-get update
            sudo apt-get install --reinstall ca-certificates
            sudo update-ca-certificates
            sudo cert-sync /etc/ssl/certs/ca-certificates.crt
            cert-sync --user /etc/ssl/certs/ca-certificates.crt
      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "~3.25.0"

      - name: Setup anew (or from cache) vcpkg (and does not build any package)
        uses: lukka/run-vcpkg@v11

      - name: Add NuGet sources
        shell: bash
        env:
          VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg
          USERNAME: sshcrack
          FEED_URL: https://nuget.pkg.github.com/sshcrack/index.json
        run: |
          mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
            sources add \
            -Source "${{ env.FEED_URL }}" \
            -StorePasswordInClearText \
            -Name GitHubPackages \
            -UserName "${{ env.USERNAME }}" \
            -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
          mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
            setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" \
            -Source "${{ env.FEED_URL }}"

      - name: Download web build artifact
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: react-native/dist/

      - name: Cache cross-compile toolchain
        if: matrix.build-type.requires-toolchain
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/cross-compile
          key: cross-compile-toolchain-v0.0.1-beta

      - name: Download and extract cross-compile toolchain
        if: matrix.build-type.requires-toolchain && steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/cross-compile
          cd ${{ runner.temp }}/cross-compile
          wget -O cross-compile.tar.xz "https://github.com/sshcrack/led-matrix/releases/download/v0.0.1-beta/cross-compile.tar.xz"
          tar -xvf cross-compile.tar.xz
          rm cross-compile.tar.xz

      - name: Create vcpkg triplet for arm64-rpi
        if: matrix.build-type.requires-toolchain
        run: |
          mkdir -p $VCPKG_ROOT/triplets/community
          cat > $VCPKG_ROOT/triplets/community/arm64-rpi.cmake << 'EOF'
          set(VCPKG_TARGET_ARCHITECTURE arm64)
          set(VCPKG_CRT_LINKAGE dynamic)
          set(VCPKG_LIBRARY_LINKAGE static)

          set(VCPKG_CMAKE_SYSTEM_NAME Linux)

          set(VCPKG_CHAINLOAD_TOOLCHAIN_FILE ${{ runner.temp }}/cross-compile/PI.cmake)
          EOF

      - name: Build ${{ matrix.build-type.name }}
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ${{ matrix.build-type.preset }}
          configurePresetAdditionalArgs: "['-DVCPKG_INSTALL_OPTIONS=--debug']"
          buildPreset: ${{ matrix.build-type.preset }}
          packagePreset: ${{ matrix.build-type.preset }}
        env:
          VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/sshcrack/index.json,readwrite"
          SKIP_WEB_BUILD: "ON"
          CROSS_COMPILE_ROOT: ${{ matrix.build-type.requires-toolchain && runner.temp }}/cross-compile

      - name: Upload ${{ matrix.build-type.name }} artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.build-type.artifact-name }}
          path: ${{ matrix.build-type.artifact-path }}

  # Build React Native APK
  build-react-native:
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          version: 10
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          cache-dependency-path: "react-native/pnpm-lock.yaml"

      - name: Install dependencies
        working-directory: react-native
        run: pnpm install

      - name: 🏗 Setup EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          packager: pnpm
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Build React Native APK
        working-directory: react-native
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
        run: |
          pnpx expo prebuild -p android
          eas build -p android --local --non-interactive --output ../app-v${{ needs.prepare.outputs.version }}.apk

      - name: Upload React Native APK
        uses: actions/upload-artifact@v4
        with:
          name: react-native-apk
          path: app-v${{ needs.prepare.outputs.version }}.apk

  # Create release and upload all artifacts
  create-release:
    runs-on: ubuntu-latest
    needs: [prepare, build-matrix, build-react-native]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create draft release
        id: create_release
        run: |
          TAG="v${{ needs.prepare.outputs.version }}"
          # Get previous tag (if any)
          PREV_TAG=$(git tag --sort=-creatordate | grep -v "$TAG" | head -n1 || true)
          if [ -n "$PREV_TAG" ]; then
            CHANGELOG="[Changelog](https://github.com/${{ github.repository }}/compare/$PREV_TAG...$TAG)"
          else
            CHANGELOG="Initial release."
          fi
          gh release create "$TAG" \
            --draft \
            --title "$TAG" \
            --notes "$CHANGELOG"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload all artifacts to release
        run: |
          TAG="v${{ needs.prepare.outputs.version }}"
          mv artifacts/emulator-build/led-matrix-${{ needs.prepare.outputs.version }}-Linux.tar.gz artifacts/emulator-build/emulator-${{ needs.prepare.outputs.version }}-Linux.tar.gz


          # Upload emulator
          gh release upload "$TAG" artifacts/emulator-build/emulator-${{ needs.prepare.outputs.version }}-Linux.tar.gz

          # Upload led-matrix artifacts
          gh release upload "$TAG" artifacts/led-matrix-build/led-matrix-${{ needs.prepare.outputs.version }}-Linux.tar.gz
          gh release upload "$TAG" artifacts/led-matrix-build/led-matrix-${{ needs.prepare.outputs.version }}-Linux.deb

          # Upload React Native APK
          gh release upload "$TAG" artifacts/react-native-apk/app-v${{ needs.prepare.outputs.version }}.apk
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
