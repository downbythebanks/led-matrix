name: "Copilot Setup Steps"

# Automatically run the setup steps when they are changed to allow for easy validation, and
# allow manual testing through the repository's "Actions" tab
on:
  workflow_dispatch:
  push:
    paths:
      - .github/workflows/copilot-setup-steps.yml
  pull_request:
    paths:
      - .github/workflows/copilot-setup-steps.yml
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  USERNAME: sshcrack
  VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg
  FEED_URL: https://nuget.pkg.github.com/sshcrack/index.json
  VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/sshcrack/index.json,readwrite"

jobs:
  # The job MUST be called `copilot-setup-steps` or it will not be picked up by Copilot.
  copilot-setup-steps:
    runs-on: ubuntu-latest

    # Set the permissions to the lowest permissions possible needed for your steps.
    # Copilot will be given its own token for its operations.
    permissions:
      # If you want to clone the repository as part of your setup steps, for example to install dependencies, you'll need the `contents: read` permission. If you don't clone the repository in your setup steps, Copilot will do this for you automatically after the steps complete.
      contents: read
      packages: read

    # You can define any steps you want, and they will run before the agent starts.
    # If you do not check out your code, Copilot will do this for you.
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: python3-jinja2 pkg-config autoconf automake libtool python3 linux-libc-dev curl libltdl-dev libx11-dev libxft-dev libxext-dev libwayland-dev libxkbcommon-dev libegl1-mesa-dev libibus-1.0-dev mono-complete libxrandr-dev libxrandr2 wayland-protocols extra-cmake-modules xorg-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev libgtk-3-dev libayatana-appindicator3-dev
          version: 1.0

      - name: Update certificates
        run: |
            sudo apt-get update
            sudo apt-get install --reinstall ca-certificates
            sudo update-ca-certificates
            sudo cert-sync /etc/ssl/certs/ca-certificates.crt
            cert-sync --user /etc/ssl/certs/ca-certificates.crt

      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "~3.25.0"

      - name: Setup anew (or from cache) vcpkg (and does not build any package)
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgDirectory: '${{ github.workspace }}/../vcpkg'
          vcpkgConfigurationJsonGlob: "vcpkg-configuration.json"

      - name: Add NuGet sources (Linux)
        shell: bash
        env:
          VCPKG_EXE: ${{ github.workspace }}/../vcpkg/vcpkg
          USERNAME: sshcrack
          FEED_URL: https://nuget.pkg.github.com/sshcrack/index.json
        run: |
          mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
            sources add \
            -Source "${{ env.FEED_URL }}" \
            -StorePasswordInClearText \
            -Name GitHubPackages \
            -UserName "${{ env.USERNAME }}" \
            -Password "${{ secrets.GH_PACKAGES_TOKEN }}"
          mono `${{ env.VCPKG_EXE }} fetch nuget | tail -n 1` \
            setapikey "${{ secrets.GH_PACKAGES_TOKEN }}" \
            -Source "${{ env.FEED_URL }}"

      - name: Cache cross-compile toolchain
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/cross-compile
          key: cross-compile-toolchain-v0.0.1-beta

      - name: Download and extract cross-compile toolchain
        if: steps.cache-toolchain.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/cross-compile
          cd ${{ runner.temp }}/cross-compile
          wget -O cross-compile.tar.xz "https://github.com/sshcrack/led-matrix/releases/download/v0.0.1-beta/cross-compile.tar.xz"
          tar -xvf cross-compile.tar.xz
          rm cross-compile.tar.xz

      - name: Create vcpkg triplet for arm64-rpi
        run: |
          mkdir -p $VCPKG_ROOT/triplets/community
          cat > $VCPKG_ROOT/triplets/community/arm64-rpi.cmake << 'EOF'
          set(VCPKG_TARGET_ARCHITECTURE arm64)
          set(VCPKG_CRT_LINKAGE dynamic)
          set(VCPKG_LIBRARY_LINKAGE static)

          set(VCPKG_CMAKE_SYSTEM_NAME Linux)

          set(VCPKG_CHAINLOAD_TOOLCHAIN_FILE ${{ runner.temp }}/cross-compile/PI.cmake)
          EOF

      # React Native web build only for led-matrix build
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
          cache-dependency-path: "react-native/pnpm-lock.yaml"

      - name: Install React Native dependencies
        working-directory: react-native
        run: pnpm install

      - name: Build React Native web version
        working-directory: react-native
        run: pnpm exec expo export --platform web

      - name: Configure emulator
        uses: lukka/run-cmake@v10
        env:
          VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/sshcrack/index.json,readwrite"
        with:
          configurePreset: emulator
          configurePresetAdditionalArgs: "['-DSKIP_WEB_BUILD=ON']"

      - name: Configure desktop-linux
        uses: lukka/run-cmake@v10
        env:
          VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/sshcrack/index.json,readwrite"
        with:
          configurePreset: desktop-linux
